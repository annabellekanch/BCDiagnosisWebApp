# -*- coding: utf-8 -*-
"""WebsiteMLP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xz4A0ppaWNZBcJyyE_FkV088mtH4Vniv
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping


data = pd.read_csv("data.csv")

data.drop(['id', 'Unnamed: 32'], axis = 1)

X = data.drop(columns = ['diagnosis'])
y = data['diagnosis'].map({'M': 1, 'B': 0})

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

import numpy as np

# Check for NaN values in the training and test data
print(np.isnan(X_train).sum())  # Count of NaNs in training data
print(np.isnan(X_test).sum())   # Count of NaNs in test data

from sklearn.impute import SimpleImputer

# Use SimpleImputer to replace NaNs with the mean
imputer = SimpleImputer(strategy='mean')
X_train = imputer.fit_transform(X_train)
X_test = imputer.transform(X_test)

print(np.isnan(X_train).sum())  # Count of NaNs in training data
print(np.isnan(X_test).sum())

from tensorflow.keras.regularizers import l2
model = Sequential()
model.add(Dense(64, input_shape=(X_train.shape[1],), activation='relu', kernel_regularizer=l2(0.001)))
model.add(Dropout(0.2))

#model.add(Dense(1024, activation='relu', kernel_regularizer=l2(0.001)))
#model.add(Dropout(0.5))

#model.add(Dense(512, activation='relu', kernel_regularizer=l2(0.001)))
#model.add(Dropout(0.5))

model.add(Dense(256, activation='relu', kernel_regularizer=l2(0.001)))
model.add(Dropout(0.3))

model.add(Dense(128, activation='relu', kernel_regularizer=l2(0.001)))
model.add(Dropout(0.3))

model.add(Dense(64, activation='relu', kernel_regularizer=l2(0.001)))
model.add(Dropout(0.3))

model.add(Dense(32, activation='relu', kernel_regularizer=l2(0.001)))
model.add(Dropout(0.2))

model.add(Dense(16, activation='relu', kernel_regularizer=l2(0.001)))
model.add(Dropout(0.2))

# Output layer
model.add(Dense(1, activation='sigmoid'))
#Talk about relu v sigmoid + why choose different hyperparameters

model.compile(optimizer=Adam(learning_rate=0.0005), loss='binary_crossentropy', metrics=['accuracy'])

# Set up early stopping
early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)

# Train the model
history = model.fit(
    X_train, y_train,
    epochs=100,
    batch_size=32,
    validation_split=0.2,
    validation_data=(X_test, y_test),
    callbacks=[early_stopping],
    verbose=1
)

# Evaluate the model on the test data
test_loss, test_accuracy = model.evaluate(X_test, y_test, verbose=0)
print(f'Test Accuracy: {test_accuracy:.2f}')

import matplotlib.pyplot as plt

# Plot training & validation accuracy values
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()
plt.savefig("Accuracy.png")

# Plot training & validation loss values
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()
plt.savefig("Loss.png")

#cnn vs MLP why MLP works better
import joblib

# Save the scaler
joblib.dump(scaler, 'scaler.pkl')

# Save the model
model.save('mlp_model.h5')

